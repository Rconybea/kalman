1.
DONE write stochastic process generator (see kloeden+platen ?)
  - e.g. realization of brownian motion
  - can use to generate time series of underlying prices
DONE write black-scholes pricer for options
  .. maybe also PDE pricer... 
DONE write generator for family of related options
DONE write StrikeSetOmdSimSource::advance_until()
DONE StrikeSetMarketModel to forward omd events to StrikeSetOmdSimSource
DONE generalize simulator,  allow not-ready sources
DONE __repr__ for OptionStrikeSet in option_py/
DONE wrap KalmanFilterTransition
DONE wrap KalmanFilterObservable
* wrap KalmanFilterInput
* wrap KalmanFilterStep
* wrap KalmanFilterSpec (somehow ..  need to learn about lambdas or provide simple MkStepFn variations)
* wrap KalmanFilterEngine::extrapolate()
* wrap KalmanFilterEngine::kalman_gain(), .kalman_gain1()
* wrap KalmanFilterEngine::correct(), .correct1()
* wrap KalmanFilterEngine::step(), .step1() (somehow .. learn about overloading functions)

* wrap PricingContext for option_py/
* wrap StrikeSetMarketModel in option_py/
* make it so can connect an underlying process to StrikeSetMarketModel
  using x.add_sink(y)
  * ul_sim_src ctor for StrikeSetMarketModel

* overview map for filtering pipeline
  StrikeSetMarketModel -> kalman filter
* Size2
* nicely-encapsulated Side,  with methods + conversions
* simulate order flow!   random price-taking orders
* add callbacks to StrikeSetOmdSimSource

* operate kalman filter from sim sources
* kalman filter itself as simulation source

* logistic function + distribution (fat tailed distribution)
  - want to consider product of cumulative logistics,
    differentiable + maybe(?) easy to work with
* extended kalman filter
* unscented kalman filter
