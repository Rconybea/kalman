* Introduction
  project to implement extended kalman filter;
  subsidiary goals: get familiar with cmake, eigen, pybind11, python.

** Tools
   - nix    provides reproducible build/development environment
   - cmake  makefile generator
   - make   uses makefiles generated by cmake
   - git    source code control.
            see: https://www.freecodecamp.org/news/git-cheat-sheet-and-best-practices-c6ce5321f52/

** Libraries
   - eigen  linear algebra library

* Directory Layout
  kalman
  +- README                this file
  +- default.nix           controls hermetic build.   nix-build uses this
  +- shell.nix             controls interactive development environment.  nix-shell uses this
  +- kalman.nix            specifies dependencies + build scripts for this project
  +- mkderivation.nix      utility for kalman.nix
  +- builder.sh            build script; invoked from nix-build
  +- setup.sh              make shell environment for building;  called from builder.sh, shell.nix
  +- .gitignore            exclude generated files from git
  +- build                 run builds from here; excluded from git
  +- src/                  root of source tree
     +- CmakeLists.txt     configure cmake build
     +- KalmanConfig.h.in  configuration file template;  generates kalman/build/KalmanConfig.h
     +- matrix/

* To build this project using nix:
   $ nix-build -A path/to/kalman

* To debug build / do development
   $ nix-shell -A path/to/kalman
   $ help
   $ emacs&          # edit files
   $ make -C kalman/build
  to attempt nix build
   $ do_all_phases   # shell function defined in setup.sh

* to run cmake
   $ nix-shell -A path/to/kalman
   $ cd path/to/kalman/build
   $ cmake -DEXPORT_COMPILE_COMMANDS=1 ../src

  subsequently can use:
   $ make -C path/to/kalman/build

  or
   $ make VERBOSE=1 -C path/to/kalman/build
  to see exact command log
  